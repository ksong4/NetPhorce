% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\name{plotClustersHeatmap}
\alias{plotClustersHeatmap}
\title{Plot Heatmap Based on the Clusters Verified from the \code{\link{findClusters}} function}
\usage{
plotClustersHeatmap(
  netPhorceData = netPhorceData,
  foundClusterIDs = NULL,
  plotly = TRUE
)
}
\arguments{
\item{netPhorceData}{(Required). Processed netPhorce Object}

\item{foundClusterIDs}{(Required). Output from the \code{\link{findClusters}} function. If nothing in the “MatchedClusters” vector, no plot will be generated.}

\item{plotly}{(Required). If TRUE, output an interactive \code{\link{plotly}} version, else output a static \code{\link{ggplot2}} version.}
}
\value{
a ggplot/plotly object
}
\description{
generate Heatmap Based on the clusters matched to the netPhorce Data from findUniqueIDs() function
}
\examples{
\dontrun{
## Loading Two Conditions Example
data("twoConditionsExample")
## Identify the Key Columns
identifiedCols <- confirmColumnNames(rawMaxQuant = twoConditionsExample,
                                    positionCol = "Position",
                                    reverseCol = "Reverse",
                                    localizationProbCol = "Localization prob",
                                    potentialContaminationCol = "Potential contaminant",
                                    aminoAcidCol = "Amino acid",
                                    uniqueIDCol = "Protein",
                                    seqWindowIDCol = "Sequence window",
                                    fastaIDCol = "Fasta headers")
## Identify the Intensity Columns with Condition, Time Point and Replication Information
intensityCols <- confirmIntensityColumns(rawMaxQuant = twoConditionsExample,
                                         intensityPattern = "con_time_rep",
                                         verbose = TRUE)
## Process the data based on the identified columns
netPhorceData <- processData(rawMaxQuant = twoConditionsExample,
                             processedColNames = identifiedCols,
                             processedIntensity = intensityCols,
                             minReplication = 3,
                             minLocalProb = 0.75)
## Returns all available peptides along with IDs from Significant Set
clusterIDs_Sig <-
  findClusters(netPhorceData = netPhorceData,
               clusterIDs = c(0),
               heatmapType = "Significant",
               minQVal = 0.1,
               verbose = TRUE)
## Returns all available peptides Identify Cluster IDs from “AbsencePresence” Set
clusterIDs_AbsPrs <-
  findClusters(netPhorceData = netPhorceData,
               clusterIDs = c(1, 2),
               heatmapType = "AbsencePresence",
               verbose = TRUE)
## Plotting Significant Heatmap - PLOTLY Version
plotClustersHeatmap(netPhorceData = netPhorceData,
                    foundClusterIDs = clusterIDs_Sig,
                    plotly = TRUE)
## Plotting Significant Heatmap - GGPLOT version
plotClustersHeatmap(netPhorceData = netPhorceData,
                    foundClusterIDs = clusterIDs_AbsPrs,
                    plotly = FALSE)
}
}
