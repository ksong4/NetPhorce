% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\name{findClusters}
\alias{findClusters}
\title{Identify and Validate Provided Clusters for plotUniqueIDsHeatmaps}
\usage{
findClusters(
  netPhorceData = netPhorceData,
  clusterIDs = NULL,
  heatmapType = "Significant",
  minQVal = 0.05,
  verbose = TRUE
)
}
\arguments{
\item{netPhorceData}{(Required). Processed NetPhorce Object}

\item{clusterIDs}{(Required). Select a specific cluster number.}

\item{heatmapType}{(Required). Either "Significant" or "AbsencePresence" are required. "Significant" for the unique peptide IDs that were significantly differentially phosphorylated peptides. "AbsencePresence" for the unique peptide IDs that were absent at least one-time point.}

\item{minQVal}{(Optional). A q-value threshold only for heatmapType == \code{Significant}. A lower threshold increases stringency for displaying significant phosphopeptides into the heatmap. The q-value controls the positive false discovery rate and is estimated based on the p-values obtained from a linear mixed model fitted to the intensities of each peptide.}

\item{verbose}{If TRUE, the function will return all the peptides along with its cluster number in a table format when the clusterIDs is \code{NULL} or the input cluster is not found.}
}
\value{
list of data.frames
}
\description{
Return matched clusters that are avliable for plotting using \code{\link{plotClustersHeatmap}} function. The user can leave the clusterIDs as \code{NULL} to export a full table of all the avliable cluster and its corresponding peptide IDs. After identifying the uniqueID, the user can then perceed with plotting by the unique ID or by the cluster in which the peptide belongs to.
}
\examples{
\dontrun{
## Loading Two Conditions Example
data("twoConditionsExample")
## Identify the Key Columns
identifiedCols <- confirmColumnNames(rawMaxQuant = twoConditionsExample,
                                    positionCol = "Position",
                                    reverseCol = "Reverse",
                                    localizationProbCol = "Localization prob",
                                    potentialContaminationCol = "Potential contaminant",
                                    aminoAcidCol = "Amino acid",
                                    uniqueIDCol = "Protein",
                                    seqWindowIDCol = "Sequence window",
                                    fastaIDCol = "Fasta headers")
## Identify the Intensity Columns with Condition, Time Point and Replication Information
intensityCols <- confirmIntensityColumns(rawMaxQuant = twoConditionsExample,
                                         intensityPattern = "con_time_rep",
                                         verbose = TRUE)
## Process the data based on the identified columns
netPhorceData <- processData(rawMaxQuant = twoConditionsExample,
                             processedColNames = identifiedCols,
                             processedIntensity = intensityCols,
                             minReplication = 3,
                             minLocalProb = 0.75)
## Returns all available peptides along with IDs from Significant Set
clusterIDs_Sig <-
  findClusters(netPhorceData = netPhorceData,
               clusterIDs = c(0),
               heatmapType = "Significant",
               minQVal = 0.1,
               verbose = TRUE)
## Returns all available peptides Identify Cluster IDs from “AbsencePresence” Set
clusterIDs_AbsPrs <-
  findClusters(netPhorceData = netPhorceData,
               clusterIDs = c(1, 2),
               heatmapType = "AbsencePresence",
               verbose = TRUE)
}
}
